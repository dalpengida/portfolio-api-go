// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsernames(t *testing.T) {
	t.Parallel()

	query := Usernames()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsernamesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsernamesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Usernames().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsernamesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsernameSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsernamesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsernameExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Username exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsernameExists to return true, but got false.")
	}
}

func testUsernamesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usernameFound, err := FindUsername(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usernameFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsernamesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Usernames().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsernamesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Usernames().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsernamesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usernameOne := &Username{}
	usernameTwo := &Username{}
	if err = randomize.Struct(seed, usernameOne, usernameDBTypes, false, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}
	if err = randomize.Struct(seed, usernameTwo, usernameDBTypes, false, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usernameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usernameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Usernames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsernamesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usernameOne := &Username{}
	usernameTwo := &Username{}
	if err = randomize.Struct(seed, usernameOne, usernameDBTypes, false, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}
	if err = randomize.Struct(seed, usernameTwo, usernameDBTypes, false, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usernameOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usernameTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usernameBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func usernameAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Username) error {
	*o = Username{}
	return nil
}

func testUsernamesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Username{}
	o := &Username{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usernameDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Username object: %s", err)
	}

	AddUsernameHook(boil.BeforeInsertHook, usernameBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usernameBeforeInsertHooks = []UsernameHook{}

	AddUsernameHook(boil.AfterInsertHook, usernameAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usernameAfterInsertHooks = []UsernameHook{}

	AddUsernameHook(boil.AfterSelectHook, usernameAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usernameAfterSelectHooks = []UsernameHook{}

	AddUsernameHook(boil.BeforeUpdateHook, usernameBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usernameBeforeUpdateHooks = []UsernameHook{}

	AddUsernameHook(boil.AfterUpdateHook, usernameAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usernameAfterUpdateHooks = []UsernameHook{}

	AddUsernameHook(boil.BeforeDeleteHook, usernameBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usernameBeforeDeleteHooks = []UsernameHook{}

	AddUsernameHook(boil.AfterDeleteHook, usernameAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usernameAfterDeleteHooks = []UsernameHook{}

	AddUsernameHook(boil.BeforeUpsertHook, usernameBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usernameBeforeUpsertHooks = []UsernameHook{}

	AddUsernameHook(boil.AfterUpsertHook, usernameAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usernameAfterUpsertHooks = []UsernameHook{}
}

func testUsernamesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsernamesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usernameColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsernamesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsernamesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsernameSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsernamesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Usernames().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usernameDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `bigint`, `Username`: `varchar`}
	_               = bytes.MinRead
)

func testUsernamesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usernamePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usernameAllColumns) == len(usernamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsernamesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usernameAllColumns) == len(usernamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Username{}
	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usernameDBTypes, true, usernamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usernameAllColumns, usernamePrimaryKeyColumns) {
		fields = usernameAllColumns
	} else {
		fields = strmangle.SetComplement(
			usernameAllColumns,
			usernamePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsernameSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsernamesUpsert(t *testing.T) {
	t.Parallel()

	if len(usernameAllColumns) == len(usernamePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUsernameUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Username{}
	if err = randomize.Struct(seed, &o, usernameDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Username: %s", err)
	}

	count, err := Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usernameDBTypes, false, usernamePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Username struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Username: %s", err)
	}

	count, err = Usernames().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

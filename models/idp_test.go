// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIdps(t *testing.T) {
	t.Parallel()

	query := Idps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIdpsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIdpsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Idps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIdpsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IdpSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIdpsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IdpExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Idp exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IdpExists to return true, but got false.")
	}
}

func testIdpsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	idpFound, err := FindIdp(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if idpFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIdpsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Idps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIdpsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Idps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIdpsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	idpOne := &Idp{}
	idpTwo := &Idp{}
	if err = randomize.Struct(seed, idpOne, idpDBTypes, false, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}
	if err = randomize.Struct(seed, idpTwo, idpDBTypes, false, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = idpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = idpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Idps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIdpsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	idpOne := &Idp{}
	idpTwo := &Idp{}
	if err = randomize.Struct(seed, idpOne, idpDBTypes, false, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}
	if err = randomize.Struct(seed, idpTwo, idpDBTypes, false, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = idpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = idpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func idpBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func idpAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Idp) error {
	*o = Idp{}
	return nil
}

func testIdpsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Idp{}
	o := &Idp{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, idpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Idp object: %s", err)
	}

	AddIdpHook(boil.BeforeInsertHook, idpBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	idpBeforeInsertHooks = []IdpHook{}

	AddIdpHook(boil.AfterInsertHook, idpAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	idpAfterInsertHooks = []IdpHook{}

	AddIdpHook(boil.AfterSelectHook, idpAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	idpAfterSelectHooks = []IdpHook{}

	AddIdpHook(boil.BeforeUpdateHook, idpBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	idpBeforeUpdateHooks = []IdpHook{}

	AddIdpHook(boil.AfterUpdateHook, idpAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	idpAfterUpdateHooks = []IdpHook{}

	AddIdpHook(boil.BeforeDeleteHook, idpBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	idpBeforeDeleteHooks = []IdpHook{}

	AddIdpHook(boil.AfterDeleteHook, idpAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	idpAfterDeleteHooks = []IdpHook{}

	AddIdpHook(boil.BeforeUpsertHook, idpBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	idpBeforeUpsertHooks = []IdpHook{}

	AddIdpHook(boil.AfterUpsertHook, idpAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	idpAfterUpsertHooks = []IdpHook{}
}

func testIdpsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIdpsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(idpColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIdpsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIdpsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IdpSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIdpsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Idps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	idpDBTypes = map[string]string{`ID`: `bigint`, `Provider`: `varchar`, `ProviderID`: `varchar`, `UserID`: `bigint`}
	_          = bytes.MinRead
)

func testIdpsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(idpPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(idpAllColumns) == len(idpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, idpDBTypes, true, idpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIdpsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(idpAllColumns) == len(idpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Idp{}
	if err = randomize.Struct(seed, o, idpDBTypes, true, idpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, idpDBTypes, true, idpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(idpAllColumns, idpPrimaryKeyColumns) {
		fields = idpAllColumns
	} else {
		fields = strmangle.SetComplement(
			idpAllColumns,
			idpPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IdpSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIdpsUpsert(t *testing.T) {
	t.Parallel()

	if len(idpAllColumns) == len(idpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIdpUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Idp{}
	if err = randomize.Struct(seed, &o, idpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Idp: %s", err)
	}

	count, err := Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, idpDBTypes, false, idpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Idp struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Idp: %s", err)
	}

	count, err = Idps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
